diff --git a/mesh/mesh.cpp b/mesh/mesh.cpp
index e18def619..afee9d8f9 100644
--- a/mesh/mesh.cpp
+++ b/mesh/mesh.cpp
@@ -13600,22 +13600,23 @@ Mesh &MeshPart::GetMesh()
 
 MeshPartitioner::MeshPartitioner(Mesh &mesh_,
                                  int num_parts_,
-                                 int *partitioning_,
+                                 const int *partitioning_,
                                  int part_method)
    : mesh(mesh_)
 {
    if (partitioning_)
    {
-      partitioning.MakeRef(partitioning_, mesh.GetNE(), false);
+      partitioning.MakeRef(const_cast<int *>(partitioning_), mesh.GetNE(),
+                           false);
    }
    else
    {
-      partitioning_ = mesh.GeneratePartitioning(num_parts_, part_method);
       // Mesh::GeneratePartitioning always uses new[] to allocate the,
       // partitioning, so we need to tell the memory manager to free it with
       // delete[] (even if a different host memory type has been selected).
-      const MemoryType mt = MemoryType::HOST;
-      partitioning.MakeRef(partitioning_, mesh.GetNE(), mt, true);
+      constexpr MemoryType mt = MemoryType::HOST;
+      partitioning.MakeRef(mesh.GeneratePartitioning(num_parts_, part_method),
+                           mesh.GetNE(), mt, true);
    }
 
    Transpose(partitioning, part_to_element, num_parts_);
diff --git a/mesh/mesh.hpp b/mesh/mesh.hpp
index f328f6c29..1431a484e 100644
--- a/mesh/mesh.hpp
+++ b/mesh/mesh.hpp
@@ -2726,8 +2726,8 @@ public:
                                 Mesh::GeneratePartitioning() when the provided
                                 input partitioning is NULL.
    */
-   MeshPartitioner(Mesh &mesh_, int num_parts_, int *partitioning_ = NULL,
-                   int part_method = 1);
+   MeshPartitioner(Mesh &mesh_, int num_parts_,
+                   const int *partitioning_ = nullptr, int part_method = 1);
 
    /** @brief Construct a MeshPart corresponding to the given @a part_id.
 
diff --git a/mesh/nurbs.cpp b/mesh/nurbs.cpp
index 06c80c967..8ab5e5650 100644
--- a/mesh/nurbs.cpp
+++ b/mesh/nurbs.cpp
@@ -4722,19 +4722,15 @@ const Array<int>& NURBSExtension::GetPatchBdrElements(int patch)
 #ifdef MFEM_USE_MPI
 ParNURBSExtension::ParNURBSExtension(const ParNURBSExtension &orig)
    : NURBSExtension(orig),
-     partitioning(orig.partitioning ? new int[orig.GetGNE()] : NULL),
+     partitioning(orig.partitioning),
      gtopo(orig.gtopo),
      ldof_group(orig.ldof_group)
 {
-   // Copy the partitioning, if not NULL
-   if (partitioning)
-   {
-      std::memcpy(partitioning, orig.partitioning, orig.GetGNE()*sizeof(int));
-   }
 }
 
 ParNURBSExtension::ParNURBSExtension(MPI_Comm comm, NURBSExtension *parent,
-                                     int *part, const Array<bool> &active_bel)
+                                     const int *partitioning_,
+                                     const Array<bool> &active_bel)
    : gtopo(comm)
 {
    if (parent->NumOfActiveElems < parent->NumOfElements)
@@ -4772,11 +4768,11 @@ ParNURBSExtension::ParNURBSExtension(MPI_Comm comm, NURBSExtension *parent,
    CountElements();
    CountBdrElements();
 
-   // copy 'part' to 'partitioning'
-   partitioning = new int[GetGNE()];
+   // copy 'partitioning_' to 'partitioning'
+   partitioning.SetSize(GetGNE());
    for (int i = 0; i < GetGNE(); i++)
    {
-      partitioning[i] = part[i];
+      partitioning[i] = partitioning_[i];
    }
    SetActive(partitioning, active_bel);
 
@@ -4867,8 +4863,6 @@ ParNURBSExtension::ParNURBSExtension(NURBSExtension *parent,
 
    delete parent;
 
-   partitioning = NULL;
-
    MFEM_VERIFY(par_parent->partitioning,
                "parent ParNURBSExtension has no partitioning!");
 
diff --git a/mesh/nurbs.hpp b/mesh/nurbs.hpp
index b1c772bd3..7212774e9 100644
--- a/mesh/nurbs.hpp
+++ b/mesh/nurbs.hpp
@@ -872,7 +872,7 @@ class ParNURBSExtension : public NURBSExtension
 {
 private:
    /// Partitioning of the global elements by MPI rank
-   int *partitioning;
+   mfem::Array<int> partitioning;
 
    /// Construct and return a table of DOFs for each global element.
    Table *GetGlobalElementDofTable();
@@ -882,9 +882,10 @@ private:
 
    /** @brief Set active global elements and boundary elements based on MPI
        ranks in @a partition and the array @a active_bel. */
-   void SetActive(const int *partition, const Array<bool> &active_bel);
+   void SetActive(const int *partitioning_, const Array<bool> &active_bel);
+
    /// Set up GroupTopology @a gtopo for MPI communication.
-   void BuildGroups(const int *partition, const Table &elem_dof);
+   void BuildGroups(const int *partitioning_, const Table &elem_dof);
 
 public:
    GroupTopology gtopo;
@@ -895,11 +896,12 @@ public:
    ParNURBSExtension(const ParNURBSExtension &orig);
 
    /** @brief Constructor for an MPI communicator @a comm, a global
-       NURBSExtension @a parent, a partitioning @a part of the global elements
-       by MPI rank, and a marker @a active_bel of active global boundary
-       elements on this rank. The partitioning is deep-copied and will not be
-       deleted by this object. */
-   ParNURBSExtension(MPI_Comm comm, NURBSExtension *parent, int *part,
+       NURBSExtension @a parent, a partitioning @a partitioning_ of the global
+       elements by MPI rank, and a marker @a active_bel of active global
+       boundary elements on this rank. The partitioning is deep-copied and will
+       not be deleted by this object. */
+   ParNURBSExtension(MPI_Comm comm, NURBSExtension *parent,
+                     const int *partitioning_,
                      const Array<bool> &active_bel);
 
    /** @brief Create a parallel version of @a parent with partitioning as in
@@ -907,8 +909,6 @@ public:
        The @a parent can be either a local NURBSExtension or a global one. */
    ParNURBSExtension(NURBSExtension *parent,
                      const ParNURBSExtension *par_parent);
-
-   virtual ~ParNURBSExtension() { delete [] partitioning; }
 };
 #endif
 
diff --git a/mesh/pmesh.cpp b/mesh/pmesh.cpp
index 46ceb35e2..9556bcbd2 100644
--- a/mesh/pmesh.cpp
+++ b/mesh/pmesh.cpp
@@ -103,29 +103,32 @@ ParMesh& ParMesh::operator=(ParMesh &&mesh)
    return *this;
 }
 
-ParMesh::ParMesh(MPI_Comm comm, Mesh &mesh, int *partitioning_,
+ParMesh::ParMesh(MPI_Comm comm, Mesh &mesh, const int *partitioning_,
                  int part_method)
    : glob_elem_offset(-1)
    , glob_offset_sequence(-1)
    , gtopo(comm)
 {
-   int *partitioning = NULL;
-   Array<bool> activeBdrElem;
-
    MyComm = comm;
    MPI_Comm_size(MyComm, &NRanks);
    MPI_Comm_rank(MyComm, &MyRank);
 
+   Array<int> partitioning;
+   Array<bool> activeBdrElem;
+
+   if (partitioning_)
+   {
+      partitioning.MakeRef(const_cast<int *>(partitioning_), mesh.GetNE(),
+                           false);
+   }
+
    if (mesh.Nonconforming())
    {
-      if (partitioning_)
-      {
-         partitioning = partitioning_;
-      }
-      ncmesh = pncmesh = new ParNCMesh(comm, *mesh.ncmesh, partitioning);
-      if (!partitioning)
+      ncmesh = pncmesh = new ParNCMesh(comm, *mesh.ncmesh, partitioning_);
+
+      if (!partitioning_)
       {
-         partitioning = new int[mesh.GetNE()];
+         partitioning.SetSize(mesh.GetNE());
          for (int i = 0; i < mesh.GetNE(); i++)
          {
             partitioning[i] = pncmesh->InitialPartition(i);
@@ -158,13 +161,14 @@ ParMesh::ParMesh(MPI_Comm comm, Mesh &mesh, int *partitioning_,
 
       ncmesh = pncmesh = NULL;
 
-      if (partitioning_)
-      {
-         partitioning = partitioning_;
-      }
-      else
+      if (!partitioning_)
       {
-         partitioning = mesh.GeneratePartitioning(NRanks, part_method);
+         // Mesh::GeneratePartitioning always uses new[] to allocate the,
+         // partitioning, so we need to tell the memory manager to free it with
+         // delete[] (even if a different host memory type has been selected).
+         constexpr MemoryType mt = MemoryType::HOST;
+         partitioning.MakeRef(mesh.GeneratePartitioning(NRanks, part_method),
+                              mesh.GetNE(), mt, true);
       }
 
       // re-enumerate the partitions to better map to actual processor
@@ -306,11 +310,6 @@ ParMesh::ParMesh(MPI_Comm comm, Mesh &mesh, int *partitioning_,
       SetVerticesFromNodes(Nodes);
    }
 
-   if (partitioning != partitioning_)
-   {
-      delete [] partitioning;
-   }
-
    have_face_nbr_data = false;
 }
 
@@ -730,7 +729,7 @@ void ParMesh::BuildVertexGroup(int ngroups, const Table &vert_element)
 }
 
 void ParMesh::BuildSharedFaceElems(int ntri_faces, int nquad_faces,
-                                   const Mesh& mesh, int *partitioning,
+                                   const Mesh& mesh, const int *partitioning,
                                    const STable3D *faces_tbl,
                                    const Array<int> &face_group,
                                    const Array<int> &vert_global_local)
diff --git a/mesh/pmesh.hpp b/mesh/pmesh.hpp
index e33db8e43..c6ceaed22 100644
--- a/mesh/pmesh.hpp
+++ b/mesh/pmesh.hpp
@@ -241,7 +241,7 @@ protected:
    void BuildVertexGroup(int ngroups, const Table& vert_element);
 
    void BuildSharedFaceElems(int ntri_faces, int nquad_faces,
-                             const Mesh &mesh, int *partitioning,
+                             const Mesh &mesh, const int *partitioning,
                              const STable3D *faces_tbl,
                              const Array<int> &face_group,
                              const Array<int> &vert_global_local);
@@ -343,7 +343,7 @@ public:
        meshes and quick space-filling curve equipartitioning for nonconforming
        meshes (elements of nonconforming meshes should ideally be ordered as a
        sequence of face-neighbors). */
-   ParMesh(MPI_Comm comm, Mesh &mesh, int *partitioning_ = NULL,
+   ParMesh(MPI_Comm comm, Mesh &mesh, const int *partitioning_ = nullptr,
            int part_method = 1);
 
    /** Copy constructor. Performs a deep copy of (almost) all data, so that the
@@ -438,8 +438,6 @@ public:
 
    ParNCMesh* pncmesh;
 
-   int *partitioning_cache = nullptr;
-
    int GetNGroups() const { return gtopo.NGroups(); }
 
    ///@{ @name These methods require group > 0
diff --git a/mesh/pncmesh.cpp b/mesh/pncmesh.cpp
index 218faebfc..4b5b62096 100644
--- a/mesh/pncmesh.cpp
+++ b/mesh/pncmesh.cpp
@@ -28,7 +28,8 @@ namespace mfem
 
 using namespace bin_io;
 
-ParNCMesh::ParNCMesh(MPI_Comm comm, const NCMesh &ncmesh, int *part)
+ParNCMesh::ParNCMesh(MPI_Comm comm, const NCMesh &ncmesh,
+                     const int *partitioning)
    : NCMesh(ncmesh)
 {
    MyComm = comm;
@@ -39,7 +40,8 @@ ParNCMesh::ParNCMesh(MPI_Comm comm, const NCMesh &ncmesh, int *part)
    // sequence of leaf elements into 'NRanks' parts
    for (int i = 0; i < leaf_elements.Size(); i++)
    {
-      elements[leaf_elements[i]].rank = part ? part[i] : InitialPartition(i);
+      elements[leaf_elements[i]].rank =
+         partitioning ? partitioning[i] : InitialPartition(i);
    }
 
    Update();
diff --git a/mesh/pncmesh.hpp b/mesh/pncmesh.hpp
index 2f4e1eb74..e4c54e8b6 100644
--- a/mesh/pncmesh.hpp
+++ b/mesh/pncmesh.hpp
@@ -67,7 +67,8 @@ public:
    /// Construct by partitioning a serial NCMesh.
    /** SFC partitioning is used by default. A user-specified partition can be
        passed in 'part', where part[i] is the desired MPI rank for element i. */
-   ParNCMesh(MPI_Comm comm, const NCMesh& ncmesh, int* part = NULL);
+   ParNCMesh(MPI_Comm comm, const NCMesh& ncmesh,
+             const int *partitioning = nullptr);
 
    /** Load from a stream, parallel version. See the serial NCMesh::NCMesh
        counterpart for a description of the parameters. */
@@ -81,7 +82,8 @@ public:
 
    /** An override of NCMesh::Refine, which is called eventually, after making
        sure that refinements that occur on the processor boundary are sent to
-       the neighbor processors so they can keep their ghost layers up to date.*/
+       the neighbor processors so they can keep their ghost layers up to
+       date. */
    void Refine(const Array<Refinement> &refinements) override;
 
    /// Parallel version of NCMesh::LimitNCLevel.
@@ -229,8 +231,8 @@ public:
                                     const Table &deref_table);
 
    /** Extension of NCMesh::GetBoundaryClosure. Filters out ghost vertices and
-       ghost edges from 'bdr_vertices' and 'bdr_edges', and uncovers hidden internal
-       boundary faces. */
+       ghost edges from 'bdr_vertices' and 'bdr_edges', and uncovers hidden
+       internal boundary faces. */
    void GetBoundaryClosure(const Array<int> &bdr_attr_is_ess,
                            Array<int> &bdr_vertices,
                            Array<int> &bdr_edges, Array<int> &bdr_faces) override;
@@ -252,8 +254,9 @@ protected: // interface for ParMesh
    friend class ParMesh;
 
    /** For compatibility with conforming code in ParMesh and ParFESpace.
-       Initializes shared structures in ParMesh: gtopo, shared_*, group_s*, s*_l*.
-       The ParMesh then acts as a parallel mesh cut along the NC interfaces. */
+       Initializes shared structures in ParMesh: gtopo, shared_*, group_s*,
+       s*_l*. The ParMesh then acts as a parallel mesh cut along the NC
+       interfaces. */
    void GetConformingSharedStructures(class ParMesh &pmesh);
 
    /** Populate face neighbor members of ParMesh from the ghost layer, without
@@ -519,8 +522,9 @@ protected: // implementation
        owners, keeping the ghost layer up to date. Used by Rebalance() and
        Derefine(). 'target_elements' is the number of elements this rank
        is supposed to own after the exchange. If this number is not known
-       a priori, the parameter can be set to -1, but more expensive communication
-       (synchronous sends and a barrier) will be used in that case. */
+       a priori, the parameter can be set to -1, but more expensive
+       communication (synchronous sends and a barrier) will be used in that
+       case. */
    void RedistributeElements(Array<int> &new_ranks, int target_elements,
                              bool record_comm);
 
